//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define LHB 0
#define NUM 0
#define MSK 0
#define MSC 0

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&lt { quick-tap-ms = <180>; };

/ {
//    glidepoint_mmv_ibl {
//            compatible = "zmk,input-behavior-listener";
//            device = <&glidepoint>;
//            layers = <DEF>;
//            // bindings = <&ib_tog_layer MSK>;
//            // bindings = <&ib_fwd_to_hid_io>;
//            y-invert;
//            /* NOTE: do NOT override event code here, */
//            /*       let Cirque glidepoint reports click from taps */
//    // evt-type = <INPUT_EV_REL>;
//        // x-input-code = <INPUT_REL_X>;
//        // y-input-code = <INPUT_REL_Y>;
//    };
////    glidepoint_msl_ibl {
////            compatible = "zmk,input-behavior-listener";
////            device = <&glidepoint>;
////            layers = <MSC>;
////            /* NOTE: only apply input-code overriding for INPUT_EV_REL */
////            evt-type = <INPUT_EV_REL>;
////            x-input-code = <INPUT_REL_MISC>;
////            y-input-code = <INPUT_REL_WHEEL>;
////            bindings = <&ib_wheel_scaler 1 8>;
////    };
//
//    ib_wheel_scaler: ib_wheel_scaler {
//            compatible = "zmk,input-behavior-scaler";
//            #binding-cells = <2>;
//            evt-type = <INPUT_EV_REL>;
//            input-code = <INPUT_REL_WHEEL>;
//    };
    combos {
    };

    macros {
    };

    behaviors {

    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
             &kp Q  &kp W  &kp E               &kp R      &kp T          &kp Y           &kp U            &kp I         &kp O    &kp SEMICOLON
             &kp A  &kp S  &kp D               &kp F      &kp G          &kp H           &kp J            &kp K         &kp L    &kp P
&none  &kp Z  &kp X  &kp C               &kp V      &kp B          &kp N           &kp M            &kp COMMA     &kp DOT  &kp FSLH       &kp BSLH
                           &none   &kp TAB  &kp  SPACE    &none   &kp  BACKSPACE  &kp  DELETE
            >;
        };
    };
};
