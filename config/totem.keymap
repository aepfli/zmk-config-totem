//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&lt {
    quick-tap-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <8 9>;
        };

        shortcuts {
            bindings = <&tog 7>;
            key-positions = <10 11 12 13>;
        };

        i3 {
            bindings = <&tog 8>;
            key-positions = <19 10>;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        caps_hold: caps_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_HOLD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;

            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            label = "BASE";
            bindings = <
             &as Q  &as W  &as E           &as R      &as T          &as Y        &as U            &as I         &as O    &as P
             &as A  &as S  &as D           &as F      &as G          &as H        &as J            &as K         &as L    &as SEMICOLON
&mo_tog 7 7  &as Z  &as X  &as C           &as V      &as B          &as N        &as M            &as COMMA     &as DOT  &as FSLH       &as BSLH
                           &kp LEFT_SHIFT  &lt 2 TAB  &lt 1 SPACE    &lt 3 SPACE  &lt 4 BACKSPACE  &lt 6 DELETE
            >;
        };

        sym_type {
            bindings = <
       &none     &none     &none      &none      &kp TAB      &kp UNDERSCORE  &kp DOUBLE_QUOTES  &kp AT_SIGN      &mt DOLLAR RA(N5)  &kp PERCENT
       &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &kp SPACE    &kp MINUS       &kp SQT            &kp EXCLAMATION  &kp QUESTION       &kp COLON
&none  &none     &none     &none      &none      &kp ENTER    &kp TILDE       &kp GRAVE          &kp HASH         &kp AMPERSAND      &kp ASTERISK  &none
                           &none      &none      &none        &kp SPACE       &kp BACKSPACE      &kp DELETE
            >;

            label = "SYMT";
        };

        navigation {
            bindings = <
       &none     &none     &none      &none      &none    &kp PG_UP  &kp HOME  &kp UP      &kp END    &kp PRINTSCREEN
       &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &none    &kp PG_DN  &kp LEFT  &kp DOWN    &kp RIGHT  &kp INS
&none  &none     &none     &none      &none      &none    &kp INS    &none     &none       &none      &none            &none
                           &none      &none      &none    &kp RET    &kp BSPC  &kp DELETE
            >;

            label = "nav";
        };

        sym_code {
            bindings = <
       &mt CARET ASTERISK  &kp LEFT_BRACE              &kp COLON             &kp RIGHT_BRACE                 &kp AMPERSAND    &kp ENTER      &none      &none      &none     &none
       &kp EXCLAMATION     &kp LEFT_PARENTHESIS        &mt PLUS EQUAL        &kp RIGHT_PARENTHESIS           &kp QUESTION     &kp BACKSPACE  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &kp DOLLAR          &mt LESS_THAN LEFT_BRACKET  &mt UNDERSCORE MINUS  &mt GREATER_THAN RIGHT_BRACKET  &kp PIPE         &kp DELETE     &none      &none      &none     &none     &none
                                                       &mt HASH BACKSLASH    &kp TAB                         &kp SPACE        &none          &none      &none
            >;

            label = "SYMC";
        };

        numblock {
            bindings = <
       &kp COLON  &kp N7  &kp N8  &kp N9      &mt KP_DIVIDE KP_MULTIPLY    &kp ENTER      &none      &none      &none     &none
       &none      &kp N4  &kp N5  &kp N6      &mt KP_SUBTRACT KP_PLUS      &kp BACKSPACE  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &none      &kp N1  &kp N2  &kp N3      &none                        &kp DELETE     &none      &none      &none     &none     &none
                          &kp N0  &kp KP_DOT  &lt 5 SPACE                  &none          &none      &none
            >;

            label = "numb";
        };

        numfunctions {
            bindings = <
       &none  &kp F7  &kp F8  &kp F9  &kp F10    &bt BT_CLR  &bt BT_PRV  &bt BT_PRV  &none        &out OUT_TOG
       &none  &kp F4  &kp F5  &kp F6  &kp F11    &none       &sk RSHFT   &sk RCTRL   &sk RALT     &sk RGUI
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none       &none       &none       &bootloader  &sys_reset    &none
                      &none   &none   &none      &none       &none       &none
            >;

            label = "numf";
        };

        shortcuts {
            bindings = <
        &trans      &trans     &trans      &trans       &trans        &trans  &trans     &trans     &trans    &trans
        &trans      &trans     &trans      &trans       &trans        &trans  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &trans  &trans     &trans     &trans    &trans    &trans
                               &trans      &trans       &mo 7         &trans  &trans     &trans
            >;

            label = "shortcuts";
        };

        idea {
            bindings = <
       &kp F2         &none          &kp F6         &kp LA(F7)     &none                &none  &none  &none  &none  &none
       &kp LS(LSHFT)  &kp LC(N)      &kp LS(LC(N))  &kp LS(LC(A))  &kp LS(LC(LA(T)))    &none  &none  &none  &none  &none
&to 0  &kp LA(LC(M))  &kp LA(LC(P))  &kp LA(LC(C))  &kp LA(LC(V))  &none                &none  &none  &none  &none  &none  &none
                                     &none          &none          &none                &none  &none  &none
            >;

            label = "idea";
        };

        i3 {
            bindings = <
        &kp LG(Q)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(R)    &trans  &trans     &trans     &trans     &trans
        &trans     &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &kp LG(F)    &trans  &kp LG(H)  &kp LG(J)  &kp LG(K)  &kp LG(L)
&trans  &trans     &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &trans       &trans  &trans     &trans     &trans     &trans     &trans
                               &kp LALT    &kp LCTRL   &kp LSHFT    &trans  &trans     &trans
            >;

            label = "i3";
        };
    };
};
